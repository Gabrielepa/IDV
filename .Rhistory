ifelse(Dataset == 2, "Non-liver patient",NA)))
india$Dataset = factor(india$Dataset, levels = c("Liver patient", "Non-liver patient"))
india = india[complete.cases(india),]
View(india)
str(india)
set.seed(1)
ind <- createDataPartition(india$Dataset, times = 1, list = FALSE)
train <- india[-ind,]
trainset = train %>% select(-Dataset)
test <- india[ind,]
testset = test %>% select(-Dataset)
model <- c("lda", "naive_bayes", "svmLinear", "qda",
"knn", "kknn", "rpart", "rf", "ranger", "wsrf",
"Rborist", "avNNet", "mlp", "monmlp",
"adaboost", "gbm", "svmRadial",
"svmRadialCost", "svmRadialSigma")
set.seed(1)
fit <- lapply(model, function(model){
train(Dataset ~ ., method = model, data = train)
})
warnings()
train(Dataset ~ ., method="lda", data=train)
train(Dataset~., method="naive_bayes", data=train)
train(Dataset~., model="svmLinear", data=train)
train(Dataset~., model="qda", data=train)
model <- c("naive_bayes", "svmLinear", "qda",
"knn", "kknn", "rpart", "rf", "ranger", "wsrf",
"Rborist", "avNNet", "mlp", "monmlp",
"adaboost", "gbm", "svmRadial",
"svmRadialCost", "svmRadialSigma", "lda")
set.seed(1)
fit <- lapply(model, function(model){
train(Dataset ~ ., method = model, data = train)
})
fit <- lapply(model, function(model){
print(model)
train(Dataset ~ ., method = model, data = train)
})
model <- c("naive_bayes", "svmLinear",
"knn", "kknn", "rpart", "rf", "ranger", "wsrf",
"Rborist", "avNNet", "mlp", "monmlp",
"adaboost", "gbm", "svmRadial",
"svmRadialCost", "svmRadialSigma", "lda", "qda")
fit <- lapply(model, function(model){
print(model)
train(Dataset ~ ., method = model, data = train)
})
model <- c("naive_bayes", "svmLinear", "knn", "kknn",
"rpart", "rf", "ranger", "wsrf", "Rborist",
"adaboost", "gbm", "svmRadial", "svmRadialCost",
"svmRadialSigma", "lda")
#Apply all models to train set#
set.seed(1)
fit <- lapply(model, function(model){
print(model)
train(Dataset ~ ., method = model, data = train)
})
names(fit) <- model
pred <- sapply(fit, function(fit){
predict(fit,test)
})
c <- c(1:ncol(pred))
confusionvector <- sapply(c, function(c){
confusionMatrix(factor(pred[,c]), test$Dataset)$overall["Accuracy"]
})
mean(confusionvector)
confusionvector
View(test)
str(test)
str(train)
str(confusionvector)
cv = data.frame(model=model, confusionvector=confusionvector)
cv
cv = data.frame(Model=model, Accuracy=confusionvector)
cv
max(cv$Accuracy)
where(max(cv$Accuracy))
which(max(cv$Accuracy))
c2 <- c(1:nrow(test))
mv <- sapply(c2, function(c2){
m <- majorityVote(pred[c2,])
m$majority
})
pred <- cbind(pred,mv)
cm <- confusionMatrix(factor(pred[,ncol(pred)]), test$Dataset)$overall["Accuracy"]
cm
model <- c("svmLinear", "gbm", "svmRadial", "svmRadialCost",
"svmRadialSigma", "lda")
#Apply all models to train set#
set.seed(1)
fit <- lapply(model, function(model){
print(model)
train(Dataset ~ ., method = model, data = train)
})
names(fit) <- model
#Predict test set from train fits#
pred <- sapply(fit, function(fit){
predict(fit,test)
})
#Create confusion vector#
c <- c(1:ncol(pred))
confusionvector <- sapply(c, function(c){
confusionMatrix(factor(pred[,c]), test$Dataset)$overall["Accuracy"]
})
mean(confusionvector)
cv = data.frame(Model=model, Accuracy=confusionvector)
#Select majority vote#
c2 <- c(1:nrow(test))
mv <- sapply(c2, function(c2){
m <- majorityVote(pred[c2,])
m$majority
})
pred <- cbind(pred,mv)
#Create confusion matrix using majority vote#
cm <- confusionMatrix(factor(pred[,ncol(pred)]), test$Dataset)$overall["Accuracy"]
cm
t = india %>% .[,1:11] %>% as.matrix()
cor(t)
pca = trainset %>% prcomp()
pca_sum = summary(pca)
remove(t)
pca_sum
pca$x
str(pca$x)
data.frame(pca$x, Dataset=train$Dataset)
str(data.frame(pca$x, Dataset=train$Dataset))
pca_train = data.frame(pca$x, Dataset=train$Dataset)
View(pca_train)
pca_train[,c(1,2,3,12)] %>%
gather(Component, Value, PC1:PC3, factor_key=TRUE)
set.seed(1)
fit <- lapply(model, function(model){
print(model)
train(Dataset ~ ., method = model, data = pca_train)
})
names(fit) <- model
View(fit)
pred <- sapply(fit, function(fit){
predict(fit,test)
})
c <- c(1:ncol(pred))
confusionvector <- sapply(c, function(c){
confusionMatrix(factor(pred[,c]), test$Dataset)$overall["Accuracy"]
})
mean(confusionvector)
cv = data.frame(Model=model, Accuracy=confusionvector)
india <- read.csv("indian_liver_patient.csv", na.strings = c("", "NA"), stringsAsFactors = FALSE)
india = india %>% dummy.data.frame(name = "Gender") %>% mutate(Dataset = ifelse(Dataset == 1, "Liver patient",
ifelse(Dataset == 2, "Non-liver patient",NA)))
india$Dataset = factor(india$Dataset, levels = c("Liver patient", "Non-liver patient"))
india = india[complete.cases(india),]
set.seed(1)
ind <- createDataPartition(india$Dataset, times = 1, list = FALSE)
train <- india[-ind,]
trainset = train %>% select(-Dataset)
test <- india[ind,]
#Select models#
model <- c("svmLinear", "gbm", "svmRadial", "svmRadialCost",
"svmRadialSigma", "lda")
#Apply all models to train set#
set.seed(1)
fit <- lapply(model, function(model){
print(model)
train(Dataset ~ ., method = model, data = train)
})
names(fit) <- model
#Predict test set from train fits#
pred <- sapply(fit, function(fit){
predict(fit,test)
})
#Create confusion vector#
c <- c(1:ncol(pred))
confusionvector <- sapply(c, function(c){
confusionMatrix(factor(pred[,c]), test$Dataset)$overall["Accuracy"]
})
mean(confusionvector)
cv = data.frame(Model=model, Accuracy=confusionvector)
#Select majority vote#
c2 <- c(1:nrow(test))
mv <- sapply(c2, function(c2){
m <- majorityVote(pred[c2,])
m$majority
})
pred <- cbind(pred,mv)
#Create confusion matrix using majority vote#
cm <- confusionMatrix(factor(pred[,ncol(pred)]), test$Dataset)$overall["Accuracy"]
cm
###Check correlation matrix for PCA###
###PCA###
pca = trainset %>% prcomp()
pca_sum = summary(pca)
pca_train = data.frame(pca$x, Dataset=train$Dataset)
pca_model <- c("svmLinear", "gbm", "svmRadial", "svmRadialCost",
"svmRadialSigma")
set.seed(1)
pca_fit <- lapply(pca_model, function(pca_model){
print(pca_model)
train(Dataset ~ ., method = pca_model, data = pca_train)
})
names(pca_fit) <- pca_model
#Predict test set from train fits#
pca_pred <- sapply(pca_fit, function(pca_fit){
predict(pca_fit,test)
})
testset = test %>% select(-Dataset)
pca_test = data.frame(prcomp(testset)$x, Dataset=test$Dataset)
pca_pred <- sapply(pca_fit, function(pca_fit){
predict(pca_fit,pca_test)
})
pca_c <- c(1:ncol(pca_pred))
pca_confusionvector <- sapply(pca_c, function(pca_c){
confusionMatrix(factor(pca_pred[,pca_c]), pca_test$Dataset)$overall["Accuracy"]
})
mean(pca_confusionvector)
pca_cv = data.frame(Model=pca_model, Accuracy=pca_confusionvector)
View(pca_cv)
pca_c2 <- c(1:nrow(pca_test))
pca_mv <- sapply(pca_c2, function(pca_c2){
m <- majorityVote(pca_pred[pca_c2,])
m$majority
})
pca_pred <- cbind(pca_pred,pca_mv)
pca_cm <- pca_confusionMatrix(factor(pca_pred[,ncol(pca_pred)]), pca_test$Dataset)$overall["Accuracy"]
pca_cm
pca_cm <- confusionMatrix(factor(pca_pred[,ncol(pca_pred)]), pca_test$Dataset)$overall["Accuracy"]
pca_cm
cm
View(pca_cv)
View(cv)
pca_train[,c(1,2,3,12)] %>%
gather(Component, Value, PC1:PC3, factor_key=TRUE)
str(pca_train[,c(1,2,3,12)] %>%
gather(Component, Value, PC1:PC3, factor_key=TRUE))
pca_train[,c(1,2,3,12)] %>%
gather(Component, Value, PC1:PC3, factor_key=TRUE) %>%
ggplot(aes(Dataset, Value, fill = Component))+
geom_point(cex=3, pch=21) +
coord_fixed(ratio = 1)+
labs(title = "Plot of PC1 and PC2")
pca_train[,c(1,2,3,12)] %>%
gather(Component, Value, PC1:PC3, factor_key=TRUE) %>%
ggplot(aes(Dataset, Value, fill = Component))+
geom_point() +
labs(title = "Plot of PC1 and PC2")
pca_train[,c(1,2,3,12)] %>%
gather(Component, Value, PC1:PC3, factor_key=TRUE) %>%
ggplot(aes(Dataset, Value, fill = Component))+
geom_point(cex=3, pch=21) +
labs(title = "Plot of PC1 and PC2")
pca_train[,c(1,2,3,12)] %>%
gather(Component, Value, PC1:PC3, factor_key=TRUE) %>%
ggplot(aes(Dataset, Value, fill = Component))+
geom_point(cex=3) +
labs(title = "Plot of PC1 and PC2")
pca_train[,c(1,2,3,12)] %>%
gather(Component, Value, PC1:PC3, factor_key=TRUE) %>%
ggplot(aes(Dataset, Value, fill = Component))+
geom_point(pch=21) +
labs(title = "Plot of PC1 and PC2")
pca_train[,c(1,2,3,12)] %>%
gather(Component, Value, PC1:PC3, factor_key=TRUE) %>%
ggplot(aes(Dataset, Value, fill = Component))+
geom_point(cex=0.5, pch=21) +
labs(title = "Plot of PC1 and PC2")
pca_train[,c(1,2,3,12)] %>%
gather(Component, Value, PC1:PC3, factor_key=TRUE) %>%
ggplot(aes(Dataset, Value, fill = Component))+
geom_point(cex=1, pch=21) +
labs(title = "Plot of PC1 and PC2")
pca_train[,c(1,2,3,12)] %>%
gather(Component, Value, PC1:PC3, factor_key=TRUE) %>%
ggplot(aes(Dataset, Value, fill = Component))+
geom_point(cex=1, pch=21) +
coord_cartesian(ylim=c(-2000, 1000)) +
labs(title = "Plot of PC1, PC2, and PC3 between Liver patients and Non-liver patients")
pca_train[,c(1,2,3,12)] %>%
gather(Component, Value, PC1:PC3, factor_key=TRUE) %>%
ggplot(aes(Dataset, Value, fill = Component))+
geom_point(cex=1, pch=21) +
coord_cartesian(ylim=c(-1000, 1000)) +
labs(title = "Plot of PC1, PC2, and PC3 between Liver patients and Non-liver patients")
pca_train[,c(1,2,3,12)] %>%
gather(Component, Value, PC1:PC3, factor_key=TRUE) %>%
ggplot(aes(Dataset, Value, fill = Component))+
geom_point(cex=1, pch=21) +
coord_cartesian(ylim=c(-500, 500)) +
labs(title = "Plot of PC1, PC2, and PC3 between Liver patients and Non-liver patients")
pca_train[,c(1,2,3,12)] %>%
gather(Component, Value, PC1:PC3, factor_key=TRUE) %>%
ggplot(aes(Dataset, Value, fill = Component))+
geom_point(cex=1, pch=21) +
coord_cartesian(ylim=c(-125, 125)) +
labs(title = "Plot of PC1, PC2, and PC3 between Liver patients and Non-liver patients")
pca_train[,c(1,2,3,12)] %>%
gather(Component, Value, PC1:PC3, factor_key=TRUE) %>%
ggplot(aes(Dataset, Value, fill = Component))+
geom_point(cex=3, pch=21) +
coord_cartesian(ylim=c(-125, 125)) +
labs(title = "Plot of PC1, PC2, and PC3 between Liver patients and Non-liver patients")
pca_train[,c(1,2,3,12)] %>%
gather(Component, Value, PC1:PC3, factor_key=TRUE) %>%
ggplot(aes(Value, Dataset, fill = Component))+
geom_point(cex=3, pch=21) +
coord_cartesian(xlim=c(-125, 125)) +
labs(title = "Plot of PC1, PC2, and PC3 between Liver patients and Non-liver patients")
pca_train[,c(1,2,3,12)] %>%
gather(Component, Value, PC1:PC3, factor_key=TRUE) %>%
ggplot(aes(Dataset, Value, fill = Component))+
geom_point(cex=3, pch=21) +
coord_cartesian(ylim=c(-1000, 1000)) +
labs(title = "Plot of PC1, PC2, and PC3 between Liver patients and Non-liver patients")
pca_train[,c(1,2,3,12)] %>%
plot_ly(x=.$PC1, y=.$PC2, z=.$PC3, type="scatter3d", color=.$Dataset, colors = c("indianred", "turquoise"))
pca_train[,c(1,2,3,12)]
plot(pca_sum$importance[3,], xlab="Primary Component", ylab="Cumulative Proportion")
pca$x[,1:4]
pca_train = data.frame(pca$x[,1:4], Dataset=train$Dataset)
pca_test = data.frame(prcomp(testset)$x[,1:4], Dataset=test$Dataset)
pca_model <- c("svmLinear", "gbm", "svmRadial", "svmRadialCost",
"svmRadialSigma")
set.seed(1)
pca_fit <- lapply(pca_model, function(pca_model){
print(pca_model)
train(Dataset ~ ., method = pca_model, data = pca_train)
})
names(pca_fit) <- pca_model
#Predict test set from train fits#
pca_pred <- sapply(pca_fit, function(pca_fit){
predict(pca_fit,pca_test)
})
#Create confusion vector#
pca_c <- c(1:ncol(pca_pred))
pca_confusionvector <- sapply(pca_c, function(pca_c){
confusionMatrix(factor(pca_pred[,pca_c]), pca_test$Dataset)$overall["Accuracy"]
})
mean(pca_confusionvector)
pca_cv = data.frame(Model=pca_model, Accuracy=pca_confusionvector)
#Select majority vote#
pca_c2 <- c(1:nrow(pca_test))
pca_mv <- sapply(pca_c2, function(pca_c2){
m <- majorityVote(pca_pred[pca_c2,])
m$majority
})
pca_pred <- cbind(pca_pred,pca_mv)
#Create confusion matrix using majority vote#
pca_cm <- confusionMatrix(factor(pca_pred[,ncol(pca_pred)]), pca_test$Dataset)$overall["Accuracy"]
pca_cm
india %>% mutate(Gender = ifelse(GenderMale == 1, "Male",
ifelse(GenderFemale == 1, "Female",0))) %>%
group_by(Dataset, Gender) %>%
summarise(SampleSize = n()) %>% group_by(Gender) %>%
mutate(Proportion = SampleSize/sum(SampleSize) *100)
india %>% mutate(Gender = ifelse(GenderMale == 1, "Male",
ifelse(GenderFemale == 1, "Female",0))) %>%
group_by(Dataset, Gender) %>%
summarise(SampleSize = n()) %>% group_by(Gender) %>%
mutate(Percent = SampleSize/sum(SampleSize) *100)
mean(confusionvector)
cm
cv
cv
mean(cm)
mean(pca_confusionvector)
pca_cm
summar(pca)
summary(pca)
pca_train = data.frame(pca$x[,1:7], Dataset=train$Dataset)
pca_test = data.frame(prcomp(testset)$x[,1:7], Dataset=test$Dataset)
###Train using PCA train set###
pca_model <- c("svmLinear", "gbm", "svmRadial", "svmRadialCost",
"svmRadialSigma")
set.seed(1)
pca_fit <- lapply(pca_model, function(pca_model){
print(pca_model)
train(Dataset ~ ., method = pca_model, data = pca_train)
})
names(pca_fit) <- pca_model
#Predict test set from train fits#
pca_pred <- sapply(pca_fit, function(pca_fit){
predict(pca_fit,pca_test)
})
#Create confusion vector#
pca_c <- c(1:ncol(pca_pred))
pca_confusionvector <- sapply(pca_c, function(pca_c){
confusionMatrix(factor(pca_pred[,pca_c]), pca_test$Dataset)$overall["Accuracy"]
})
mean(pca_confusionvector)
pca_cv = data.frame(Model=pca_model, Accuracy=pca_confusionvector)
#Select majority vote#
pca_c2 <- c(1:nrow(pca_test))
pca_mv <- sapply(pca_c2, function(pca_c2){
m <- majorityVote(pca_pred[pca_c2,])
m$majority
})
pca_pred <- cbind(pca_pred,pca_mv)
#Create confusion matrix using majority vote#
pca_cm <- confusionMatrix(factor(pca_pred[,ncol(pca_pred)]), pca_test$Dataset)$overall["Accuracy"]
pca_cm
cm
mean(pca_confusionvector)
mean(confusionvector)
View(pca_train)
library(tidyverse)
library(dummies)
library(caret)
library(mclust)
india <- read.csv("indian_liver_patient.csv", na.strings = c("", "NA"), stringsAsFactors = FALSE)
india = india %>% dummy.data.frame(name = "Gender") %>% mutate(Dataset = ifelse(Dataset == 1, "Liver patient",
ifelse(Dataset == 2, "Non-liver patient",NA)))
india$Dataset = factor(india$Dataset, levels = c("Liver patient", "Non-liver patient"))
india = india[complete.cases(india),]
india %>% mutate(Gender = ifelse(GenderMale == 1, "Male",
ifelse(GenderFemale == 1, "Female",0))) %>%
group_by(Dataset, Gender) %>%
summarise(SampleSize = n()) %>% group_by(Gender) %>%
mutate(Percentage = SampleSize/sum(SampleSize) *100)
set.seed(1)
ind <- createDataPartition(india$Dataset, times = 1, list = FALSE)
train <- india[-ind,]
trainset = train %>% select(-Dataset)
#################################################################
test <- india[ind,]
testset = test %>% select(-Dataset)
model <- c("svmLinear", "gbm", "svmRadial", "svmRadialCost",
"svmRadialSigma", "lda")
#################################################################
#Apply all models to train set#
set.seed(1)
fit <- lapply(model, function(model){
print(model)
train(Dataset ~ ., method = model, data = train)
})
names(fit) <- model
#################################################################
#Predict test set from train fits#
pred <- sapply(fit, function(fit){
predict(fit,test)
})
#################################################################
#Create confusion vector#
c <- c(1:ncol(pred))
confusionvector <- sapply(c, function(c){
confusionMatrix(factor(pred[,c]), test$Dataset)$overall["Accuracy"]
})
# mean(confusionvector)
cv = data.frame(Model=model, Accuracy=confusionvector)
#################################################################
#Select majority vote#
c2 <- c(1:nrow(test))
mv <- sapply(c2, function(c2){
m <- majorityVote(pred[c2,])
m$majority
})
pred <- cbind(pred,mv)
#################################################################
#Create confusion matrix using majority vote#
cm <- confusionMatrix(factor(pred[,ncol(pred)]), test$Dataset)$overall["Accuracy"]
# cm
cv
###PCA###
pca = trainset %>% prcomp()
pca_sum = summary(pca)
pca_sum
plot(pca_sum$importance[3,], xlab="Primary Component", ylab="Cumulative Proportion")
###PCA###
pca_train = data.frame(pca$x[,1:7], Dataset=train$Dataset)
pca_test = data.frame(prcomp(testset)$x[,1:7], Dataset=test$Dataset)
pca_train[,c(1,2,3,8)] %>%
gather(Component, Value, PC1:PC3, factor_key=TRUE) %>%
ggplot(aes(Dataset, Value, fill = Component))+
geom_point(cex=3, pch=21) +
coord_cartesian(ylim=c(-1000, 1000)) +
labs(title = "Plot of Top 3 Primary Components and Diagnosis")
#################################################################
###Train using PCA train set###
pca_model <- c("svmLinear", "gbm", "svmRadial", "svmRadialCost",
"svmRadialSigma")
set.seed(1)
pca_fit <- lapply(pca_model, function(pca_model){
print(pca_model)
train(Dataset ~ ., method = pca_model, data = pca_train)
})
names(pca_fit) <- pca_model
#################################################################
#Predict test set from train fits#
pca_pred <- sapply(pca_fit, function(pca_fit){
predict(pca_fit,pca_test)
})
#################################################################
#Create confusion vector#
pca_c <- c(1:ncol(pca_pred))
pca_confusionvector <- sapply(pca_c, function(pca_c){
confusionMatrix(factor(pca_pred[,pca_c]), pca_test$Dataset)$overall["Accuracy"]
})
# mean(pca_confusionvector)
pca_cv = data.frame(Model=pca_model, Accuracy=pca_confusionvector)
#################################################################
#Select majority vote#
pca_c2 <- c(1:nrow(pca_test))
pca_mv <- sapply(pca_c2, function(pca_c2){
m <- majorityVote(pca_pred[pca_c2,])
m$majority
})
pca_pred <- cbind(pca_pred,pca_mv)
#################################################################
#Create confusion matrix using majority vote#
pca_cm <- confusionMatrix(factor(pca_pred[,ncol(pca_pred)]), pca_test$Dataset)$overall["Accuracy"]
# pca_cm
pca_cv
###PCA###
pca_train = data.frame(pca$x[,1:7], Dataset=train$Dataset)
pca_test = data.frame(prcomp(testset)$x[,1:7], Dataset=test$Dataset)
